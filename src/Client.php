<?php

namespace Picqer\BolRetailerV9;

// This class is auto generated by OpenApi\ClientGenerator
class Client extends BaseClient
{

    /**
     * Gets all commissions and possible reductions by EAN, price, and optionally condition.
     * @param Model\BulkCommissionQuery[] $commissionQueries
     * @return Model\Commission[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCommissions(array $commissionQueries): array
    {
        $url = "retailer/commission";
        $options = [
            'body' => Model\BulkCommissionRequest::constructFromArray(['commissionQueries' => $commissionQueries]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\BulkCommissionResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('POST', $url, $options, $responseTypes);
        return $result === null ? [] : $result->commissions;
    }

    /**
     * Commissions can be filtered by condition, which defaults to NEW. We will calculate the commission amount from the
     * EAN and price.
     * @param string $ean The EAN number associated with this product.
     * @param float $unitPrice The price of the product with a period as a decimal separator. The price should always
     * have two decimals precision.
     * @param string|null $condition The condition of the offer.
     * @return Model\Commission|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCommission(string $ean, float $unitPrice, ?string $condition = 'NEW'): ?Model\Commission
    {
        $url = "retailer/commission/${ean}";
        $options = [
            'query' => [
                'unit-price' => $unitPrice,
                'condition' => $condition,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\Commission::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets the details of a catalog product by means of its EAN.
     * @param string $ean The EAN number associated with this product.
     * @param string|null $AcceptLanguage The language in which the catalog product details will be retrieved.
     * @return Model\CatalogProduct|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCatalogProduct(string $ean, ?string $AcceptLanguage = 'nl'): ?Model\CatalogProduct
    {
        $url = "retailer/content/catalog-products/${ean}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\CatalogProduct::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets a selected number of recommendations for a product.
     * @param Model\ChunkRecommendationsAttributes[] $productContents
     * @return Model\ChunkRecommendationsPredictions[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getChunkRecommendations(array $productContents): array
    {
        $url = "retailer/content/chunk-recommendations";
        $options = [
            'body' => Model\ChunkRecommendationsRequest::constructFromArray(['productContents' => $productContents]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ChunkRecommendationsResponse::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes)->recommendations;
    }

    /**
     * Create content for an existing product.
     * @param Model\CreateProductContentSingleRequest $createProductContentSingleRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postProductContent(Model\CreateProductContentSingleRequest $createProductContentSingleRequest): Model\ProcessStatus
    {
        $url = "retailer/content/products";
        $options = [
            'body' => $createProductContentSingleRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the upload report of the product content submitted by upload id.
     * @param string $uploadId The identifier of the upload report.
     * @return Model\UploadReportResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getUploadReport(string $uploadId): ?Model\UploadReportResponse
    {
        $url = "retailer/content/upload-report/${uploadId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\UploadReportResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Get the product visits and the buy box percentage for an offer during a given period.
     * @param string $offerId Unique identifier for an offer.
     * @param string $period The time unit in which the offer insights are grouped.
     * @param int $numberOfPeriods The number of periods for which the offer insights are requested back in time. The
     * maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY.
     * @param array $name The name of the requested offer insight.
     * @return Model\OfferInsight[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOfferInsights(string $offerId, string $period, int $numberOfPeriods, array $name): array
    {
        $url = "retailer/insights/offer";
        $options = [
            'query' => [
                'offer-id' => $offerId,
                'period' => $period,
                'number-of-periods' => $numberOfPeriods,
                'name' => $name,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\OfferInsights::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->offerInsights;
    }

    /**
     * Gets the measurements for your performance indicators per week.
     * @param array $name The type of the performance indicator
     * @param string $year Year number in the ISO-8601 standard.
     * @param string $week Week number in the ISO-8601 standard. If you would like to get the relative scores from the
     * current week, please provide the current week number here. Be advised that measurements can change heavily over
     * the course of the week.
     * @return Model\PerformanceIndicator[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPerformanceIndicators(array $name, string $year, string $week): array
    {
        $url = "retailer/insights/performance/indicator";
        $options = [
            'query' => [
                'name' => $name,
                'year' => $year,
                'week' => $week,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\PerformanceIndicators::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->performanceIndicators;
    }

    /**
     * Get sales forecast to estimate the sales expectations on the total bol.com platform for the requested number of
     * weeks ahead.
     * @param string $offerId Unique identifier for an offer.
     * @param int $weeksAhead The number of weeks into the future, starting from today.
     * @return Model\SalesForecastResponse
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getSalesForecast(string $offerId, int $weeksAhead): Model\SalesForecastResponse
    {
        $url = "retailer/insights/sales-forecast";
        $options = [
            'query' => [
                'offer-id' => $offerId,
                'weeks-ahead' => $weeksAhead,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\SalesForecastResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Retrieves the search volume for a specified search term and period. The search volume allows you to see what
     * bol.com customers are searching for. Based on the search volume per search term you can optimize your product
     * content, or spot opportunities to extend your assortment, or analyzing trends for inventory management.
     * @param string $searchTerm The search term for which you want to request the search volume.
     * @param string $period The time unit in which the offer insights are grouped.
     * @param int $numberOfPeriods The number of periods for which the offer insights are requested back in time.
     * @param bool|null $relatedSearchTerms Indicates whether or not you want to retrieve the related search terms.
     * @return Model\SearchTerms
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getSearchTerms(string $searchTerm, string $period, int $numberOfPeriods, ?bool $relatedSearchTerms = false): Model\SearchTerms
    {
        $url = "retailer/insights/search-terms";
        $options = [
            'query' => [
                'search-term' => $searchTerm,
                'period' => $period,
                'number-of-periods' => $numberOfPeriods,
                'related-search-terms' => $relatedSearchTerms,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\SearchTerms::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * The inventory endpoint is a specific LVB/FBB endpoint. It provides a paginated list containing your fulfilment by
     * bol.com inventory. This endpoint does not provide information about your own stock.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @param array $quantity Filter inventory by providing a range of quantity (min-range)-(max-range). Note that if no
     * state query is submitted in the same request, then the quantity will be filtered on regularStock by default.
     * @param string|null $stock Filter inventory by stock level.
     * @param string|null $state Filter inventory by stock type.
     * @param string|null $query Filter inventory by EAN or product title.
     * @return Model\Inventory[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInventory(?int $page = 1, array $quantity = [], ?string $stock = null, ?string $state = null, ?string $query = null): array
    {
        $url = "retailer/inventory";
        $options = [
            'query' => [
                'page' => $page,
                'quantity' => $quantity,
                'stock' => $stock,
                'state' => $state,
                'query' => $query,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\InventoryResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->inventory;
    }

    /**
     * Gets a list of invoices, by default from the past 4 weeks. The optional period-start-date and
     * period-end-date-date parameters can be used together to retrieve invoices from a specific date range in the past,
     * the period can be no longer than 31 days. Invoices and their specifications can be downloaded separately in
     * different media formats with the ‘GET an invoice by id’ and the ‘GET an invoice specification by id’
     * calls. The available media types differ per invoice and are listed per invoice within the response. Note: the
     * media types listed in the response must be given in our standard API format.
     * @param string|null $periodStartDate Period start date in ISO 8601 standard.
     * @param string|null $periodEndDate Period end date in ISO 8601 standard.
     * @return string
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInvoices(?string $periodStartDate = null, ?string $periodEndDate = null): string
    {
        $url = "retailer/invoices";
        $options = [
            'query' => [
                'period-start-date' => $periodStartDate,
                'period-end-date' => $periodEndDate,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => 'string',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets an invoice by invoice id. The available media types differ per invoice and are listed within the response
     * from the ‘GET all invoices’ call. Note: the media types listed in the response must be given in our standard
     * API format.
     * @param string $invoiceId The id of the invoice
     * @return string
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInvoice(string $invoiceId): string
    {
        $url = "retailer/invoices/${invoiceId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => 'string',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets an invoice specification for an invoice with a paginated list of its transactions. The available media types
     * differ per invoice specification and are listed within the response from the ‘GET all invoices’ call. Note,
     * the media types listed in the response must be given in our standard API format.
     * @param string $invoiceId The identifier of the invoice.
     * @param int|null $page The requested page number with a maximum of 25,000 lines.
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInvoiceSpecification(string $invoiceId, ?int $page = null): ?string
    {
        $url = "retailer/invoices/${invoiceId}/specification";
        $options = [
            'query' => [
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Creates a new offer, and adds it to the catalog. After creation, status information can be retrieved to review if
     * the offer is valid and published to the shop.
     * @param Model\CreateOfferRequest $createOfferRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postOffer(Model\CreateOfferRequest $createOfferRequest): Model\ProcessStatus
    {
        $url = "retailer/offers";
        $options = [
            'body' => $createOfferRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Request an offer export file containing all offers.
     * @param string $format
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postOfferExport(string $format): Model\ProcessStatus
    {
        $url = "retailer/offers/export";
        $options = [
            'body' => Model\CreateOfferExportRequest::constructFromArray(['format' => $format]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve an offer export file containing all offers.
     * @param string $reportId Unique identifier for an offer export report.
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOfferExport(string $reportId): ?string
    {
        $url = "retailer/offers/export/${reportId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+csv',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Request an unpublished offer report containing all unpublished offers and reasons.
     * @param string $format
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postUnpublishedOfferReport(string $format): Model\ProcessStatus
    {
        $url = "retailer/offers/unpublished";
        $options = [
            'body' => Model\CreateUnpublishedOfferReportRequest::constructFromArray(['format' => $format]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve an unpublished offer report containing all unpublished offers and reasons.
     * @param string $reportId Unique identifier for unpublished offer report.
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getUnpublishedOfferReport(string $reportId): ?string
    {
        $url = "retailer/offers/unpublished/${reportId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+csv',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Retrieve an offer by using the offer id provided to you when creating or listing your offers.
     * @param string $offerId Unique identifier for an offer.
     * @return Model\RetailerOffer|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOffer(string $offerId): ?Model\RetailerOffer
    {
        $url = "retailer/offers/${offerId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\RetailerOffer::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Use this endpoint to send an offer update. This endpoint returns a process status.
     * @param string $offerId Unique identifier for an offer.
     * @param Model\UpdateOfferRequest $updateOfferRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putOffer(string $offerId, Model\UpdateOfferRequest $updateOfferRequest): Model\ProcessStatus
    {
        $url = "retailer/offers/${offerId}";
        $options = [
            'body' => $updateOfferRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Delete an offer by id.
     * @param string $offerId Unique identifier for an offer.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function deleteOffer(string $offerId): Model\ProcessStatus
    {
        $url = "retailer/offers/${offerId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('DELETE', $url, $options, $responseTypes);
    }

    /**
     * Update price(s) for offer by id.
     * @param string $offerId Unique identifier for an offer.
     * @param Model\Pricing $pricing
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function updateOfferPrice(string $offerId, Model\Pricing $pricing): Model\ProcessStatus
    {
        $url = "retailer/offers/${offerId}/price";
        $options = [
            'body' => Model\UpdateOfferPriceRequest::constructFromArray(['pricing' => $pricing]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Update stock for offer by id.
     * @param string $offerId Unique identifier for an offer.
     * @param Model\UpdateOfferStockRequest $updateOfferStockRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function updateOfferStock(string $offerId, Model\UpdateOfferStockRequest $updateOfferStockRequest): Model\ProcessStatus
    {
        $url = "retailer/offers/${offerId}/stock";
        $options = [
            'body' => $updateOfferStockRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Gets a paginated list of all orders for a retailer.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @param string|null $fulfilmentMethod Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). In order to
     * retrieve both FBR and FBB orders, ALL can be used as a parameter.
     * @param string|null $status To filter on order status. You can filter on either all orders independent from their
     * status, open orders (excluding shipped and cancelled orders), and shipped orders.
     * @param int|null $changeIntervalMinute To filter on the period in minutes during which the latest change was
     * performed on an order item.
     * @param string|null $latestChangeDate To filter on the date on which the latest change was performed on an order
     * item. Up to 3 months of history is supported.
     * @return Model\ReducedOrder[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOrders(?int $page = 1, ?string $fulfilmentMethod = 'FBR', ?string $status = 'OPEN', ?int $changeIntervalMinute = null, ?string $latestChangeDate = null): array
    {
        $url = "retailer/orders";
        $options = [
            'query' => [
                'page' => $page,
                'fulfilment-method' => $fulfilmentMethod,
                'status' => $status,
                'change-interval-minute' => $changeIntervalMinute,
                'latest-change-date' => $latestChangeDate,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ReducedOrders::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->orders;
    }

    /**
     * This endpoint can be used to either confirm a cancellation request by the customer or to cancel an order item you
     * yourself are unable to fulfil.
     * @param Model\OrderItemCancellation[] $orderItems
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function cancelOrderItem(array $orderItems): Model\ProcessStatus
    {
        $url = "retailer/orders/cancellation";
        $options = [
            'body' => Model\ContainerForTheOrderItemsThatHaveToBeCancelled::constructFromArray(['orderItems' => $orderItems]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Ship a single order item within a customer order by providing shipping information. If you purchased a shipping
     * label you should add the shippingLabelId to this message and leave the transport element empty. If you will ship
     * the item using your own transporter method you must omit the shippingLabelId entirely and fill in the transport
     * element with the fields from GET shipping labels.
     * @param Model\ShipmentRequest $shipmentRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function shipOrderItem(Model\ShipmentRequest $shipmentRequest): Model\ProcessStatus
    {
        $url = "retailer/orders/shipment";
        $options = [
            'body' => $shipmentRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Gets an order by order id. The order can be partially shipped or cancelled, and the message contains the quantity
     * shipped or cancelled items. The unitPrice takes account of volume discounts.
     * @param string $orderId The id of the order to get.
     * @return Model\Order|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getOrder(string $orderId): ?Model\Order
    {
        $url = "retailer/orders/${orderId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\Order::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets the list of products based on category, search term or filters.
     * @param Model\ProductListRequest $productListRequest
     * @param string|null $AcceptLanguage The language in which the product list will be retrieved.
     * @return Model\ProductListResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductList(Model\ProductListRequest $productListRequest, ?string $AcceptLanguage = 'nl'): ?Model\ProductListResponse
    {
        $url = "retailer/products/list";
        $options = [
            'body' => $productListRequest,
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ProductListResponse::class,
            '404' => 'null',
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the list of possible filters for products based on category or search term.
     * @param string|null $countryCode The country for which the filters will be retrieved.
     * @param string|null $searchTerm The search-term to get the associated categories and filters for.
     * @param string|null $categoryId The category to get the associated filters for.
     * @param string|null $AcceptLanguage The language in which the product list filters will be retrieved.
     * @return Model\ProductListFiltersResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductListFilters(?string $countryCode = 'NL', ?string $searchTerm = null, ?string $categoryId = null, ?string $AcceptLanguage = 'nl'): ?Model\ProductListFiltersResponse
    {
        $url = "retailer/products/list-filters";
        $options = [
            'query' => [
                'country-code' => $countryCode,
                'search-term' => $searchTerm,
                'category-id' => $categoryId,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ProductListFiltersResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets the list of asset available for the product by EAN.
     * @param string $ean The EAN number associated with this product.
     * @param string|null $usage Type of the asset being used for.
     * @return Model\ProductAssets[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductAssets(string $ean, ?string $usage = 'PRIMARY'): array
    {
        $url = "retailer/products/${ean}/assets";
        $options = [
            'query' => [
                'usage' => $usage,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ProductAssetsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->assets;
    }

    /**
     * Use this endpoint to get a list of offers available in the webshop. The list includes offers for all retailers.
     * @param string $ean The EAN number associated with this product.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @param string|null $countryCode Countries in which this offer is currently on sale in the webshop, in ISO-3166-1
     * format.
     * @param bool|null $bestOfferOnly Indicator to request the best offer within the country for the requested EAN.
     * @param string|null $condition The condition of the offered product.
     * @return Model\Offer[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCompetingOffers(string $ean, ?int $page = 1, ?string $countryCode = 'NL', ?bool $bestOfferOnly = false, ?string $condition = 'NEW'): array
    {
        $url = "retailer/products/${ean}/offers";
        $options = [
            'query' => [
                'page' => $page,
                'country-code' => $countryCode,
                'best-offer-only' => $bestOfferOnly,
                'condition' => $condition,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\CompetingOffersResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->offers;
    }

    /**
     * Gets the list of categories and the URL where the product is placed in the webshop.
     * @param string $ean The EAN number associated with this product.
     * @param string|null $countryCode The country of the product placed on the webshop.
     * @param string|null $AcceptLanguage The language in which the product categories and URL will be retrieved.
     * @return Model\ProductPlacementResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductPlacement(string $ean, ?string $countryCode = 'NL', ?string $AcceptLanguage = 'nl'): ?Model\ProductPlacementResponse
    {
        $url = "retailer/products/${ean}/placement";
        $options = [
            'query' => [
                'country-code' => $countryCode,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ProductPlacementResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Get the bol.com specific product identifier and the related EANs.
     * @param string $ean The EAN number associated with this product.
     * @return Model\ProductIdsResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductIds(string $ean): ?Model\ProductIdsResponse
    {
        $url = "retailer/products/${ean}/product-ids";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ProductIdsResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets a list of ratings for the products associated with the provided EAN.
     * @param string $ean The EAN number associated with this rating.
     * @return Model\ProductRatingsRating[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductRatings(string $ean): array
    {
        $url = "retailer/products/${ean}/ratings";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ProductRatingsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->ratings;
    }

    /**
     * Gets a paginated list of all promotions for a retailer.
     * @param array $promotionType The type(s) of promotion to be retrieved.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\ReducedPromotion[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPromotions(array $promotionType, ?int $page = 1): array
    {
        $url = "retailer/promotions";
        $options = [
            'query' => [
                'promotion-type' => $promotionType,
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\Promotions::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->promotions;
    }

    /**
     * Gets the details of a promotion.
     * @param string $promotionId The identifier of the promotion.
     * @return Model\Promotion|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPromotion(string $promotionId): ?Model\Promotion
    {
        $url = "retailer/promotions/${promotionId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\Promotion::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets a paginated list of all products that are present within a promotion.
     * @param string $promotionId The identifier of the promotion.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\Products
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProducts(string $promotionId, ?int $page = 1): Model\Products
    {
        $url = "retailer/promotions/${promotionId}/products";
        $options = [
            'query' => [
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\Products::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets a list of replenishments.
     * @param string|null $reference Custom user defined reference to identify the replenishment.
     * @param string|null $ean The EAN number associated with this product.
     * @param string|null $startDate The creation start date to find the replenishment. In ISO 8601 format.
     * @param string|null $endDate The end date of the range to find the replenishment. In ISO 8601 format.
     * @param array $state The current state(s) of the replenishment.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\ReducedReplenishment[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getReplenishments(?string $reference = null, ?string $ean = null, ?string $startDate = null, ?string $endDate = null, array $state = [], ?int $page = 1): array
    {
        $url = "retailer/replenishments";
        $options = [
            'query' => [
                'reference' => $reference,
                'ean' => $ean,
                'start-date' => $startDate,
                'end-date' => $endDate,
                'state' => $state,
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ReplenishmentsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->replenishments;
    }

    /**
     * Creates a replenishment.
     * @param Model\CreateReplenishmentRequest $createReplenishmentRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postReplenishment(Model\CreateReplenishmentRequest $createReplenishmentRequest): Model\ProcessStatus
    {
        $url = "retailer/replenishments";
        $options = [
            'body' => $createReplenishmentRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a list of available delivery dates for a replenishment.
     * @return Model\DeliveryDatesResponse
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getDeliveryDates(): Model\DeliveryDatesResponse
    {
        $url = "retailer/replenishments/delivery-dates";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\DeliveryDatesResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Retrieve pickup time slots.
     * @param Model\PickupTimeSlotsRequest $pickupTimeSlotsRequest
     * @return Model\PickupTimeSlot[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postPickupTimeSlots(Model\PickupTimeSlotsRequest $pickupTimeSlotsRequest): array
    {
        $url = "retailer/replenishments/pickup-time-slots";
        $options = [
            'body' => $pickupTimeSlotsRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\PickupTimeSlotsResponse::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes)->timeSlots;
    }

    /**
     * Requests a list of product destinations by EANs.
     * @param Model\Ean[] $eans
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postRequestProductDestinations(array $eans): Model\ProcessStatus
    {
        $url = "retailer/replenishments/product-destinations";
        $options = [
            'body' => Model\RequestProductDestinationsRequest::constructFromArray(['eans' => $eans]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the product destinations for one or more products by product destinations id.
     * @param string $productDestinationsId The identifier of the product destinations requested.
     * @return Model\ProductDestination[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductDestinations(string $productDestinationsId): array
    {
        $url = "retailer/replenishments/product-destinations/${productDestinationsId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ProductDestinationsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->productDestinations;
    }

    /**
     * Retrieve product labels.
     * @param Model\ProductLabelsRequest $productLabelsRequest
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postProductLabels(Model\ProductLabelsRequest $productLabelsRequest): ?string
    {
        $url = "retailer/replenishments/product-labels";
        $options = [
            'body' => $productLabelsRequest,
            'produces' => 'application/vnd.retailer.v9+pdf',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets a replenishment by replenishment id.
     * @param string $replenishmentId The unique identifier of the replenishment.
     * @return Model\ReplenishmentResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getReplenishment(string $replenishmentId): ?Model\ReplenishmentResponse
    {
        $url = "retailer/replenishments/${replenishmentId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ReplenishmentResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Updates a replenishment.
     * @param string $replenishmentId The unique identifier of the replenishment.
     * @param Model\UpdateReplenishmentRequest $updateReplenishmentRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putReplenishment(string $replenishmentId, Model\UpdateReplenishmentRequest $updateReplenishmentRequest): Model\ProcessStatus
    {
        $url = "retailer/replenishments/${replenishmentId}";
        $options = [
            'body' => $updateReplenishmentRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Retrieve the load carrier labels.
     * @param string $replenishmentId The unique identifier of the replenishment.
     * @param string|null $labelType The type of label which you want to print.
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getLoadCarrierLabels(string $replenishmentId, ?string $labelType = 'WAREHOUSE'): ?string
    {
        $url = "retailer/replenishments/${replenishmentId}/load-carrier-labels";
        $options = [
            'query' => [
                'label-type' => $labelType,
            ],
            'produces' => 'application/vnd.retailer.v9+pdf',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Retrieve the pick list.
     * @param string $replenishmentId The unique identifier of the replenishment.
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPickList(string $replenishmentId): ?string
    {
        $url = "retailer/replenishments/${replenishmentId}/pick-list";
        $options = [
            'produces' => 'application/vnd.retailer.v9+pdf',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets retailer information of a single retailer.
     * @param string $retailerId The Id of the retailer which information belongs to.
     * @return Model\RetailerInformationResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getRetailerInformation(string $retailerId): ?Model\RetailerInformationResponse
    {
        $url = "retailer/retailers/${retailerId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\RetailerInformationResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Get a paginated list of multi-item returns. Handled returns are sorted by date in descending order, while
     * unhandled returns are sorted by date in ascending order.
     * @param int|null $page The page to get with a page size of 50.
     * @param bool|null $handled The status of the returns you wish to see, shows either handled or unhandled returns.
     * @param string|null $fulfilmentMethod The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by
     * bol.com (FBB).
     * @return Model\ReducedReturn[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getReturns(?int $page = 1, ?bool $handled = null, ?string $fulfilmentMethod = 'FBR'): array
    {
        $url = "retailer/returns";
        $options = [
            'query' => [
                'page' => $page,
                'handled' => $handled,
                'fulfilment-method' => $fulfilmentMethod,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ReturnsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->returns;
    }

    /**
     * Create a return, and automatically handle it with the provided handling result. When successfully created, the
     * resulting return id is provided in the process status.
     * @param Model\CreateReturnRequest $createReturnRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function createReturn(Model\CreateReturnRequest $createReturnRequest): Model\ProcessStatus
    {
        $url = "retailer/returns";
        $options = [
            'body' => $createReturnRequest,
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a return based on the return id.
     * @param string $returnId Unique identifier for a return.
     * @return Model\ReturnObject|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getReturn(string $returnId): ?Model\ReturnObject
    {
        $url = "retailer/returns/${returnId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ReturnObject::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Allows the user to handle a return. This can be to either handle an open return, or change the handlingResult of
     * an already handled return. Please refer to the Returns documentation for further details.
     * @param int $rmaId The RMA (Return Merchandise Authorization) identifier of the return.
     * @param Model\ReturnRequest $returnRequest The handling result requested by the retailer.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function handleReturn(int $rmaId, Model\ReturnRequest $returnRequest): Model\ProcessStatus
    {
        $url = "retailer/returns/${rmaId}";
        $options = [
            'body' => $returnRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * A paginated list to retrieve all your shipments up to 3 months old. The shipments will be sorted by date in
     * descending order.
     * @param int|null $page The page to get with a page size of 50.
     * @param string|null $fulfilmentMethod The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by
     * bol.com (FBB).
     * @param string|null $orderId The id of the order. Only valid without fulfilment-method. The default
     * fulfilment-method is ignored.
     * @return Model\ReducedShipment[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getShipments(?int $page = 1, ?string $fulfilmentMethod = 'FBR', ?string $orderId = null): array
    {
        $url = "retailer/shipments";
        $options = [
            'query' => [
                'page' => $page,
                'fulfilment-method' => $fulfilmentMethod,
                'order-id' => $orderId,
            ],
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\ShipmentsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->shipments;
    }

    /**
     * Retrieve a single shipment by its corresponding id.
     * @param string $shipmentId The id of the shipment.
     * @return Model\Shipment|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getShipment(string $shipmentId): ?Model\Shipment
    {
        $url = "retailer/shipments/${shipmentId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\Shipment::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Create a shipping label with a shipping label offer id retrieved from get delivery options.
     * @param Model\ShippingLabelRequest $shippingLabelRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function createShippingLabel(Model\ShippingLabelRequest $shippingLabelRequest): Model\ProcessStatus
    {
        $url = "retailer/shipping-labels";
        $options = [
            'body' => $shippingLabelRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieves all available delivery options based on the supplied configuration of order items that has to be
     * shipped.
     * @param Model\DeliveryOptionsRequestOrderItem[] $orderItems
     * @return Model\DeliveryOption[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getDeliveryOptions(array $orderItems): array
    {
        $url = "retailer/shipping-labels/delivery-options";
        $options = [
            'body' => Model\DeliveryOptionsRequest::constructFromArray(['orderItems' => $orderItems]),
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\DeliveryOptionsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('POST', $url, $options, $responseTypes);
        return $result === null ? [] : $result->deliveryOptions;
    }

    /**
     * Retrieves a shipping label by shipping label id. Metadata for the shipping label is added as headers in the
     * response. If you are only interested in the metadata, you can do a HEAD request to retrieve only the headers
     * without the label data.
     * @param string $shippingLabelId The shipping label id.
     * @return string|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getShippingLabel(string $shippingLabelId): ?string
    {
        $url = "retailer/shipping-labels/${shippingLabelId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+pdf',
        ];
        $responseTypes = [
            '200' => 'string',
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a list of all configured and active push notification subscriptions.
     * @return Model\SubscriptionResponse[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPushNotificationSubscriptions(): array
    {
        $url = "retailer/subscriptions";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\SubscriptionsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->subscriptions;
    }

    /**
     * Create a push notification subscription for one (or more) of the available resources. The configured URL has to
     * support https scheme.
     * @param Model\CreateSubscriptionRequest $createSubscriptionRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postPushNotificationSubscription(Model\CreateSubscriptionRequest $createSubscriptionRequest): Model\ProcessStatus
    {
        $url = "retailer/subscriptions";
        $options = [
            'body' => $createSubscriptionRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a list of public keys that should be used to validate the signature header for push notifications
     * received from bol.com.
     * @return Model\KeySet[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getSubscriptionKeys(): array
    {
        $url = "retailer/subscriptions/signature-keys";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\KeySetResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->signatureKeys;
    }

    /**
     * Send a test push notification to all subscriptions for the provided event.
     * @param string $subscriptionId A unique identifier for the subscription.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postTestPushNotification(string $subscriptionId): Model\ProcessStatus
    {
        $url = "retailer/subscriptions/test/${subscriptionId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a configured and active push notification subscription with the provided id.
     * @param string $subscriptionId A unique identifier for the subscription.
     * @return Model\SubscriptionResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPushNotificationSubscription(string $subscriptionId): ?Model\SubscriptionResponse
    {
        $url = "retailer/subscriptions/${subscriptionId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '200' => Model\SubscriptionResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Update an existing push notification subscription with the supplied id. The configured URL has to support https
     * scheme.
     * @param string $subscriptionId A unique identifier for the subscription.
     * @param Model\UpdateSubscriptionRequest $updateSubscriptionRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putPushNotificationSubscription(string $subscriptionId, Model\UpdateSubscriptionRequest $updateSubscriptionRequest): Model\ProcessStatus
    {
        $url = "retailer/subscriptions/${subscriptionId}";
        $options = [
            'body' => $updateSubscriptionRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Delete a push notification subscription with the provided id.
     * @param string $subscriptionId A unique identifier for the subscription.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function deletePushNotificationSubscription(string $subscriptionId): Model\ProcessStatus
    {
        $url = "retailer/subscriptions/${subscriptionId}";
        $options = [
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('DELETE', $url, $options, $responseTypes);
    }

    /**
     * Add information to an existing transport. The transport id is part of the shipment. You can retrieve the
     * transport id through the GET shipment list request.
     * @param string $transportId The transport id.
     * @param Model\ChangeTransportRequest $changeTransportRequest The change transport requested by the user.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function addTransportInformationByTransportId(string $transportId, Model\ChangeTransportRequest $changeTransportRequest): Model\ProcessStatus
    {
        $url = "retailer/transports/${transportId}";
        $options = [
            'body' => $changeTransportRequest,
            'produces' => 'application/vnd.retailer.v9+json',
            'consumes' => 'application/vnd.retailer.v9+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Gets a list of all price star boundaries for a specific EAN.
     * @param string $ean The EAN number associated with this product.
     * @return Model\PriceStarBoundaries|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getPriceStarBoundaries(string $ean): ?Model\PriceStarBoundaries
    {
        $url = "retailer/insights/price-star-boundaries/${ean}";
        $options = [
            'produces' => 'application/vnd.retailer.v10+json',
        ];
        $responseTypes = [
            '200' => Model\PriceStarBoundaries::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Gets a list of paginated invoice requests initiated by customers.
     * @param string|null $shipmentId The id of the shipment.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @param array $state To filter on invoice request state. You can filter on all invoice requests regardless their
     * statuses, open invoice requests requiring your action and invoice requests uploaded with possible errors.
     * @return Model\InvoiceRequests[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getInvoiceRequests(?string $shipmentId = null, ?int $page = 1, array $state = []): array
    {
        $url = "retailer/shipments/invoices/requests";
        $options = [
            'query' => [
                'shipment-id' => $shipmentId,
                'page' => $page,
                'state' => $state,
            ],
            'produces' => 'application/vnd.retailer.v10+json',
        ];
        $responseTypes = [
            '200' => Model\InvoiceRequestsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->invoiceRequests;
    }

    /**
     * Uploads an invoice associated with shipment id.
     * @param string $invoice The invoice file.
     * @param string $shipmentId The id of the shipment associated with the invoice.
     * @return Model\ProcessStatus|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function uploadInvoice(string $invoice, string $shipmentId): ?Model\ProcessStatus
    {
        $url = "retailer/shipments/invoices/${shipmentId}";
        $options = [
            'multipart' => [
                [
                    'name' => 'invoice',
                    'contents' => \GuzzleHttp\Psr7\Utils::tryFopen($invoice, 'r'),
                ],
            ],
            'produces' => 'application/vnd.retailer.v10+json',
            'consumes' => 'multipart/form-data',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
            '404' => 'null',
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Retrieve a list of process statuses, which shows information regarding previously executed PUT/POST/DELETE
     * requests in descending order. You need to supply an entity id and event type. Please note: process status
     * instances are only retained for a limited period of time after completion. Outside of this period, deleted
     * process statuses will no longer be returned. Please handle this accordingly, by stopping any active polling for
     * these statuses.
     * @param string $entityId The entity id is not unique, so you will need to provide an event type. For example, an
     * entity id can be an order item id, transport id, return number, replenishment id, campaign id, and keyword id.
     * @param string $eventType The event type can only be used in combination with the entity id.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\ProcessStatus[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProcessStatusEntityId(string $entityId, string $eventType, ?int $page = 1): array
    {
        $url = "shared/process-status";
        $options = [
            'query' => [
                'entity-id' => $entityId,
                'event-type' => $eventType,
                'page' => $page,
            ],
            'produces' => 'application/vnd.retailer.v10+json',
        ];
        $responseTypes = [
            '200' => Model\ProcessStatusResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->processStatuses;
    }

    /**
     * Retrieve a list of process statuses, which shows information regarding previously executed PUT/POST/DELETE
     * requests. No more than 1000 process status id's can be sent in a single request. Please note: process status
     * instances are only retained for a limited period of time after completion. Outside of this period, deleted
     * process statuses will no longer be returned. Please handle this accordingly, by stopping any active polling for
     * these statuses.
     * @param Model\ProcessStatusId[] $processStatusQueries
     * @return Model\ProcessStatus[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProcessStatusBulk(array $processStatusQueries): array
    {
        $url = "shared/process-status";
        $options = [
            'body' => Model\BulkProcessStatusRequest::constructFromArray(['processStatusQueries' => $processStatusQueries]),
            'produces' => 'application/vnd.retailer.v10+json',
            'consumes' => 'application/vnd.retailer.v10+json',
        ];
        $responseTypes = [
            '200' => Model\ProcessStatusResponse::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes)->processStatuses;
    }

    /**
     * Retrieve a specific process status, which shows information regarding a previously executed PUT/POST/DELETE
     * request. All PUT/POST/DELETE requests on the other endpoints will supply a process status id in the related
     * response. You can use this id to retrieve a status by using the endpoint below. Please note: process status
     * instances are only retained for a limited period of time after completion. Outside of this period, a 404 will be
     * returned for missing process statuses. Please handle this accordingly, by stopping any active polling for these
     * statuses.
     * @param string $processStatusId The id of the process status being requested. This id is supplied in every
     * response to a PUT/POST/DELETE request on the other endpoints.
     * @return Model\ProcessStatus|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProcessStatus(string $processStatusId): ?Model\ProcessStatus
    {
        $url = "shared/process-status/${processStatusId}";
        $options = [
            'produces' => 'application/vnd.retailer.v10+json',
        ];
        $responseTypes = [
            '200' => Model\ProcessStatus::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }
}
